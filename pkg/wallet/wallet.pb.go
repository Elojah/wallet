// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: wallet.proto

package wallet

import (
	fmt "fmt"
	github_com_elojah_wallet_pkg_ulid "github.com/elojah/wallet/pkg/ulid"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type W struct {
	ID     github_com_elojah_wallet_pkg_ulid.ID `protobuf:"bytes,1,opt,name=ID,proto3,customtype=github.com/elojah/wallet/pkg/ulid.ID" json:"ID"`
	Date   types.Timestamp                      `protobuf:"bytes,2,opt,name=Date,proto3" json:"Date"`
	Amount string                               `protobuf:"bytes,3,opt,name=Amount,proto3" json:"Amount,omitempty"`
}

func (m *W) Reset()      { *m = W{} }
func (*W) ProtoMessage() {}
func (*W) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{0}
}
func (m *W) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *W) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_W.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *W) XXX_Merge(src proto.Message) {
	xxx_messageInfo_W.Merge(m, src)
}
func (m *W) XXX_Size() int {
	return m.Size()
}
func (m *W) XXX_DiscardUnknown() {
	xxx_messageInfo_W.DiscardUnknown(m)
}

var xxx_messageInfo_W proto.InternalMessageInfo

func (m *W) GetDate() types.Timestamp {
	if m != nil {
		return m.Date
	}
	return types.Timestamp{}
}

func (m *W) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func init() {
	proto.RegisterType((*W)(nil), "wallet.W")
}

func init() { proto.RegisterFile("wallet.proto", fileDescriptor_b88fd140af4deb6f) }

var fileDescriptor_b88fd140af4deb6f = []byte{
	// 273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8e, 0x31, 0x4f, 0x84, 0x30,
	0x14, 0x80, 0xfb, 0xf0, 0x42, 0x22, 0xde, 0xc4, 0x60, 0x08, 0xc3, 0x83, 0x18, 0x07, 0x06, 0x2d,
	0x89, 0x3a, 0x3a, 0x28, 0x61, 0x61, 0x25, 0x26, 0xce, 0xa0, 0xd8, 0x43, 0x8b, 0x25, 0x5a, 0xe2,
	0xea, 0x3f, 0xd0, 0x9f, 0xe1, 0x4f, 0x70, 0x74, 0xbc, 0x91, 0xf1, 0xe2, 0x70, 0x91, 0xb2, 0x38,
	0xde, 0xe8, 0x68, 0x6c, 0xbd, 0xe8, 0xd6, 0x2f, 0xfd, 0xde, 0xfb, 0x9e, 0x33, 0x7d, 0x28, 0x38,
	0xaf, 0x24, 0x6d, 0xef, 0x84, 0x14, 0xae, 0x6d, 0xc8, 0xdf, 0x67, 0xb5, 0x9c, 0x75, 0x25, 0xbd,
	0x10, 0x4d, 0xcc, 0x04, 0x13, 0xb1, 0xfe, 0x2e, 0xbb, 0x2b, 0x4d, 0x1a, 0xf4, 0xcb, 0x8c, 0xf9,
	0x01, 0x13, 0x82, 0xf1, 0xea, 0xcf, 0x92, 0x75, 0x53, 0xdd, 0xcb, 0xa2, 0x69, 0x8d, 0xb0, 0xf3,
	0x04, 0x0e, 0x9c, 0xbb, 0xc7, 0x8e, 0x95, 0xa5, 0x1e, 0x84, 0x10, 0x4d, 0x93, 0xbd, 0xf9, 0x32,
	0x20, 0xef, 0xcb, 0x60, 0xf7, 0x5f, 0xa9, 0xe2, 0xe2, 0xba, 0x98, 0xc5, 0xe6, 0x86, 0xb8, 0xbd,
	0x61, 0x71, 0xc7, 0xeb, 0x4b, 0x9a, 0xa5, 0xb9, 0x95, 0xa5, 0xee, 0x91, 0x33, 0x49, 0x0b, 0x59,
	0x79, 0x56, 0x08, 0xd1, 0xd6, 0x81, 0x4f, 0x4d, 0x93, 0xae, 0x9b, 0xf4, 0x6c, 0xdd, 0x4c, 0x26,
	0x3f, 0xbb, 0x73, 0x6d, 0xbb, 0xdb, 0x8e, 0x7d, 0xda, 0x88, 0xee, 0x56, 0x7a, 0x1b, 0x21, 0x44,
	0x9b, 0xf9, 0x2f, 0x25, 0x27, 0xfd, 0x80, 0x64, 0x31, 0x20, 0x59, 0x0d, 0x08, 0x5f, 0x03, 0xc2,
	0xa3, 0x42, 0x78, 0x51, 0x08, 0xaf, 0x0a, 0xe1, 0x4d, 0x21, 0xcc, 0x15, 0x42, 0xaf, 0x10, 0x3e,
	0x14, 0xc2, 0xa7, 0x42, 0xb2, 0x52, 0x08, 0xcf, 0x23, 0x92, 0x7e, 0x44, 0xb2, 0x18, 0x91, 0x94,
	0xb6, 0x2e, 0x1f, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0xbd, 0x99, 0x89, 0x73, 0x42, 0x01, 0x00,
	0x00,
}

func (this *W) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*W)
	if !ok {
		that2, ok := that.(W)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ID.Equal(that1.ID) {
		return false
	}
	if !this.Date.Equal(&that1.Date) {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	return true
}
func (this *W) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&wallet.W{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Date: "+strings.Replace(this.Date.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringWallet(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *W) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *W) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *W) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Date.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintWallet(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.ID.Size()
		i -= size
		if _, err := m.ID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintWallet(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintWallet(dAtA []byte, offset int, v uint64) int {
	offset -= sovWallet(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedW(r randyWallet, easy bool) *W {
	this := &W{}
	v1 := github_com_elojah_wallet_pkg_ulid.NewPopulatedID(r)
	this.ID = *v1
	v2 := types.NewPopulatedTimestamp(r, easy)
	this.Date = *v2
	this.Amount = string(randStringWallet(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyWallet interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneWallet(r randyWallet) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringWallet(r randyWallet) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneWallet(r)
	}
	return string(tmps)
}
func randUnrecognizedWallet(r randyWallet, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldWallet(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldWallet(dAtA []byte, r randyWallet, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateWallet(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateWallet(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateWallet(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateWallet(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateWallet(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateWallet(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateWallet(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *W) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovWallet(uint64(l))
	l = m.Date.Size()
	n += 1 + l + sovWallet(uint64(l))
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	return n
}

func sovWallet(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWallet(x uint64) (n int) {
	return sovWallet(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *W) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&W{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Date:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Date), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringWallet(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *W) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: W: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: W: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Date.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWallet(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWallet
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWallet
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWallet
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWallet        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWallet          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWallet = fmt.Errorf("proto: unexpected end of group")
)
